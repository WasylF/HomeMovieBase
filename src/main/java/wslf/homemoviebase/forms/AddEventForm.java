package wslf.homemoviebase.forms;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import javafx.util.Pair;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import wslf.homemoviebase.logic.Worker;

/**
 *
 * @author Wsl_F
 */
public class AddEventForm extends javax.swing.JFrame {

    Worker worker;

    /**
     * Creates new form AddEventForm
     *
     * @param worker worker
     */
    public AddEventForm(Worker worker) {
        this.worker = worker;

        initComponents();
        setVisible(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setEditAbleElements(true);
        loadComboBoxValues();
    }

    /**
     * Creates new form AddEventForm
     *
     * @param worker worker
     * @param path path to folder with movies
     */
    public AddEventForm(Worker worker, String path) {
        this(worker);
        autocompleteByPath(path);
    }

    private void autocompleteByPath(String path) {
        pathText.setText(path);
        String eventCaption = path.substring(path.lastIndexOf('\\') + 1);
        CaptionText.setText(eventCaption);

        String date = worker.getCreationDate(path);
        yearText.getEditor().setItem(date.substring(0, 4));
    }

    private void loadComboBoxValues() {
        categoryText.removeAllItems();
        AutoCompleteDecorator.decorate(categoryText);
        for (String category : worker.getAllCategories()) {
            categoryText.addItem(category);
        }

        placeText.removeAllItems();
        AutoCompleteDecorator.decorate(placeText);
        for (String place : worker.getAllPlaces()) {
            placeText.addItem(place);
        }

        yearText.removeAllItems();
        AutoCompleteDecorator.decorate(yearText);
        for (int year = 2016; year >= 1990; year--) {
            yearText.addItem(year);
        }

        mounthText.removeAllItems();
        AutoCompleteDecorator.decorate(mounthText);
        mounthText.addItem("");
        for (int mounth = 1; mounth <= 12; mounth++) {
            mounthText.addItem(mounth);
        }

        dayText.removeAllItems();
        AutoCompleteDecorator.decorate(dayText);
        dayText.addItem("");
        for (int day = 1; day <= 31; day++) {
            dayText.addItem(day);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        captionLabel = new javax.swing.JLabel();
        pathLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        mounthLabel = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        peopleLabel = new javax.swing.JLabel();
        placeLable = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        tagsLabel = new javax.swing.JLabel();
        targetPathLabel = new javax.swing.JLabel();
        CaptionText = new javax.swing.JTextField();
        pathText = new javax.swing.JTextField();
        yearText = new javax.swing.JComboBox();
        mounthText = new javax.swing.JComboBox();
        dayText = new javax.swing.JComboBox();
        peopleText = new javax.swing.JTextField();
        placeText = new javax.swing.JComboBox();
        categoryText = new javax.swing.JComboBox();
        tagsText = new javax.swing.JTextField();
        targetPathText = new javax.swing.JTextField();
        confirmButton = new javax.swing.JToggleButton();
        addEventButton = new javax.swing.JButton();
        explorerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        captionLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        captionLabel.setText(" Название:");
        captionLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        captionLabel.setName("captionLabel"); // NOI18N

        pathLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        pathLabel.setText(" Путь:");
        pathLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pathLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pathLabelMouseClicked(evt);
            }
        });

        yearLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        yearLabel.setText(" Год:");
        yearLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mounthLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        mounthLabel.setText(" Месяц:");
        mounthLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dayLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        dayLabel.setText(" День:");
        dayLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        peopleLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        peopleLabel.setText(" Люди:");
        peopleLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        placeLable.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        placeLable.setText(" Место:");
        placeLable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        categoryLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        categoryLabel.setText(" Категория:");
        categoryLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tagsLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        tagsLabel.setText(" Теги:");
        tagsLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        targetPathLabel.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        targetPathLabel.setText(" Путь назначения: ");
        targetPathLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        CaptionText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        CaptionText.setMargin(new java.awt.Insets(1, 10, 1, 3));


        pathText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        pathText.setMargin(new java.awt.Insets(1, 10, 1, 3));

        yearText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        mounthText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        dayText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        peopleText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        peopleText.setMargin(new java.awt.Insets(1, 10, 1, 3));

        placeText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        categoryText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N

        tagsText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        tagsText.setMargin(new java.awt.Insets(1, 10, 1, 3));

        targetPathText.setFont(new java.awt.Font("Times New Roman", 2, 18)); // NOI18N
        targetPathText.setMargin(new java.awt.Insets(1, 10, 1, 3));

        confirmButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        confirmButton.setText("Подтвердить");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        addEventButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addEventButton.setText("Добавить");
        addEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventButtonActionPerformed(evt);
            }
        });

        explorerButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        explorerButton.setText("Открыть");
        explorerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                explorerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(explorerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addEventButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(captionLabel)
                                    .addComponent(pathLabel)
                                    .addComponent(yearLabel)
                                    .addComponent(dayLabel)
                                    .addComponent(categoryLabel)
                                    .addComponent(tagsLabel)
                                    .addComponent(targetPathLabel))
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tagsText)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 622, Short.MAX_VALUE)
                                        .addComponent(confirmButton))
                                    .addComponent(CaptionText)
                                    .addComponent(pathText)
                                    .addComponent(yearText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dayText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(peopleText)
                                    .addComponent(placeText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(categoryText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(targetPathText)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(mounthLabel)
                                .addGap(57, 57, 57)
                                .addComponent(mounthText, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(placeLable, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(peopleLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(53, 53, 53))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {captionLabel, categoryLabel, dayLabel, mounthLabel, pathLabel, peopleLabel, placeLable, tagsLabel, targetPathLabel, yearLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addEventButton, confirmButton, explorerButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(CaptionText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(captionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(explorerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(pathText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pathLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(mounthText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mounthLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(peopleText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(peopleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(placeText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(placeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(categoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(tagsText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tagsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(confirmButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetPathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(addEventButton)
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {captionLabel, categoryLabel, dayLabel, mounthLabel, pathLabel, peopleLabel, placeLable, tagsLabel, targetPathLabel, yearLabel});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addEventButton, confirmButton, explorerButton});

        captionLabel.getAccessibleContext().setAccessibleName("captionLabel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathLabelMouseClicked
        String path = Helper.chooseDirectory("Выберите папку с видеофайлами");
        if (path != null) {
            autocompleteByPath(path);
        }
    }//GEN-LAST:event_pathLabelMouseClicked

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        if (confirmButton.isSelected()) {
            confirmButton.setSelected(false);
            LinkedList<Pair<String, String>> duplicates = worker.checkEvent(pathText.getText());
            if (!duplicates.isEmpty()) {
                ShowDuplicatesForm showDublicatsForm = new ShowDuplicatesForm();
                showDublicatsForm.addDuplicates(duplicates);
                showDublicatsForm.setVisible(true);
                return;
            }
            StringBuilder targetPath = new StringBuilder("");
            String status = worker.addEvent(CaptionText.getText(), pathText.getText(),
                    peopleText.getText(), placeText.getSelectedItem().toString(),
                    yearText.getSelectedItem().toString(),
                    mounthText.getSelectedItem().toString(),
                    dayText.getSelectedItem().toString(), "-1",
                    categoryText.getSelectedItem().toString(),
                    tagsText.getText(), false, targetPath);

            if (status.equals(wslf.homemoviebase.logic.Constants.SUCCESS_MESSAGE)) {
                targetPathText.setText(targetPath.toString());
                setEditAbleElements(false);
                confirmButton.setSelected(true);
            } else {
                JOptionPane.showMessageDialog(this, status, "Ошибка!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            setEditAbleElements(true);
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void setEditAbleElements(boolean able) {
        CaptionText.setEditable(able);
        pathText.setEditable(able);
        yearText.setEditable(able);
        mounthText.setEditable(able);
        dayText.setEditable(able);
        peopleText.setEditable(able);
        placeText.setEditable(able);
        categoryText.setEditable(able);
        tagsText.setEditable(able);
        targetPathText.setEditable(!able);

        CaptionText.setEnabled(able);
        pathText.setEnabled(able);
        yearText.setEnabled(able);
        mounthText.setEnabled(able);
        dayText.setEnabled(able);
        peopleText.setEnabled(able);
        placeText.setEnabled(able);
        categoryText.setEnabled(able);
        tagsText.setEnabled(able);
        targetPathText.setEnabled(!able);

        addEventButton.setEnabled(!able);
    }

    private void addEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventButtonActionPerformed

        StringBuilder targetPath = new StringBuilder(targetPathText.getText());
        String status = worker.addEvent(CaptionText.getText(), pathText.getText(),
                peopleText.getText(), placeText.getSelectedItem().toString(),
                yearText.getSelectedItem().toString(),
                mounthText.getSelectedItem().toString(),
                dayText.getSelectedItem().toString(), "-1",
                categoryText.getSelectedItem().toString(),
                tagsText.getText(), true, targetPath);

        if (status.equals(wslf.homemoviebase.logic.Constants.SUCCESS_MESSAGE)) {
            JOptionPane.showMessageDialog(this, "Операция успешно выполнена!", "Информация", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, status, "Ошибка!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addEventButtonActionPerformed

    private void explorerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_explorerButtonActionPerformed
        Path path = Paths.get(pathText.getText());
        Helper.openPathInExplorer(path, this);
    }//GEN-LAST:event_explorerButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CaptionText;
    private javax.swing.JButton addEventButton;
    private javax.swing.JLabel captionLabel;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JComboBox categoryText;
    private javax.swing.JToggleButton confirmButton;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JComboBox dayText;
    private javax.swing.JButton explorerButton;
    private javax.swing.JLabel mounthLabel;
    private javax.swing.JComboBox mounthText;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JLabel peopleLabel;
    private javax.swing.JTextField peopleText;
    private javax.swing.JLabel placeLable;
    private javax.swing.JComboBox placeText;
    private javax.swing.JLabel tagsLabel;
    private javax.swing.JTextField tagsText;
    private javax.swing.JLabel targetPathLabel;
    private javax.swing.JTextField targetPathText;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JComboBox yearText;
    // End of variables declaration//GEN-END:variables
}
